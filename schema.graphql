################################################################
## Cross events schemas
################################################################

#####################
## Enums
#####################

enum AdProposalStatus {
  CURRENT_ACCEPTED
  CURRENT_PENDING
  CURRENT_REJECTED
  PREV_ACCEPTED
  PREV_PENDING
  PREV_REJECTED
}

# each smart contract should have a single way to handle fees
enum FeeMethodology {
  ADDED_TO_AMOUNT
  CUT_TO_AMOUNT
}

enum ListingType {
  Direct
  Auction
}

enum Status {
  UNSET
  CREATED
  COMPLETED
  CANCELLED
}

enum TokenType {
  ERC1155
  ERC721
  ERC20
}

enum TransferType {
  Rent
  Sale
}

#####################
## Entities
#####################

type AdOffer @entity {
  id: String! # uint256 (offerId)
  origin: Bytes! # address DSponsorAdmin contract address
  disable: Boolean!
  name: String!
  metadataURL: String!
  metadata: AdOfferMetadata
  nftContract: NftContract!
  initialCreator: Bytes! # address
  creationTimestamp: BigInt!
  admins: [Bytes!] # address[]
  validators: [Bytes!] # address[]
  adParameters: [AdOfferParameterLink!] @derivedFrom(field: "adOffer")
  allProposals: [AdProposal!] @derivedFrom(field: "adOffer")
  currentProposals: [CurrentProposal!] @derivedFrom(field: "adOffer")
}

type AdOfferParameterLink @entity {
  id: String! # offerId-adParameter
  enable: Boolean!
  adOffer: AdOffer!
  adParameter: AdParameter!
}

type AdParameter @entity {
  id: String! #adParameter value
  base: String! # adParameter.split('-')[0]
  variants: [String!]! # adParameter.split('-')[1:]
  adOffers: [AdOfferParameterLink!] @derivedFrom(field: "adParameter")
  proposals: [AdProposal!] @derivedFrom(field: "adParameter")
  currentProposals: [CurrentProposal!] @derivedFrom(field: "adParameter")
}

type AdProposal @entity {
  id: String! # uint256 (proposalId)
  adOffer: AdOffer!
  token: Token!
  adParameter: AdParameter!
  status: AdProposalStatus!
  data: String!
  rejectReason: String
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
  # parsedData: String
}

type CurrentProposal @entity {
  id: String! # offerId-tokenId-adParameter
  adOffer: AdOffer!
  token: Token!
  adParameter: AdParameter!
  pendingProposal: AdProposal
  acceptedProposal: AdProposal
  rejectedProposal: AdProposal
}

type EpochCurrencyRevenue @entity {
  id: String! ## YYYY-MM-currencyAddress
  year: Int!
  month: Int!
  currency: Bytes! # address
  totalAmount: BigInt!
  callsWithProtocolFee: [CallWithProtocolFee!]
    @derivedFrom(field: "epochCurrencyRevenue")
}

type FeeParamsForContract @entity {
  id: Bytes! # smart contract address (which implements ProtocolFee.sol)
  feeRecipient: Bytes! # treasury address
  feeBps: BigInt! # uint96
  lastUpdateTimestamp: BigInt!
}

type NftContract @entity {
  id: Bytes! # address
  name: String
  symbol: String
  baseURI: String
  contractURI: String
  metadata: NftContractMetadata
  maxSupply: BigInt
  minter: Bytes # address
  forwarder: Bytes # address
  owner: Bytes # address
  royalty: RoyaltiesSet
  allowList: Boolean
  adOffers: [AdOffer!] @derivedFrom(field: "nftContract")
  prices: [NftPrice!] @derivedFrom(field: "nftContract") # contract level / default prices
  tokens: [Token!] @derivedFrom(field: "nftContract")
}

type NftPrice @entity {
  id: String! # nftContractAddress-currencyAddress-all|tokenId
  currency: Bytes! # address
  amount: BigInt! # uint256
  enabled: Boolean! # bool
  nftContract: NftContract!
}

type MarketplaceBid @entity {
  id: String! # listingId-bidPosition
  listing: MarketplaceListing! # NewBid listingId
  bidder: Bytes! # NewBid bidder
  quantity: BigInt! # NewBid quantity
  newPricePerToken: BigInt! # NewBid pricePerToken
  totalBidAmount: BigInt! # NewBid totalBidAmount
  paidBidAmount: BigInt! # NewBid paidBidAmount
  refundBonus: BigInt! # NEXT NewBid refundBonus
  refundAmount: BigInt! # NEXT NewBid totalBidAmount + refundBonus
  refundProfit: BigInt! # NEXT NewBid paidBidAmount - refundAmount
  currency: Bytes! # NewBid currency
  status: Status! # status
  creationTxHash: Bytes! # NewBid txhash
  revenueTransaction: RevenueTransaction
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
  #
  # once closed
  feeMethodology: FeeMethodology
  amountSentToProtocol: BigInt
  protocolRecipient: Bytes
  amountSentToSeller: BigInt
  sellerRecipient: Bytes
  amountSentToCreator: BigInt
  creatorRecipient: Bytes
  #
}

type MarketplaceDirectBuy @entity {
  id: Bytes! # txhash-logIndex
  listing: MarketplaceListing! # NewSale sale_listingId
  buyer: Bytes! # NewSale sale_buyer
  quantityBought: BigInt! # NewSale sale_quantityBought
  totalPricePaid: BigInt! # NewSale sale_totalPricePaid
  revenueTransaction: RevenueTransaction!
  #
  #
  feeMethodology: FeeMethodology
  amountSentToProtocol: BigInt
  protocolRecipient: Bytes
  amountSentToSeller: BigInt
  sellerRecipient: Bytes
  amountSentToCreator: BigInt
  creatorRecipient: Bytes
  #
}

type MarketplaceListing @entity {
  id: String! # listingId
  origin: Bytes! # address DSponsorMarketplace contract address
  listingType: ListingType! # from listing_listingType uint8
  lister: Bytes! # tokenOwner address (/!\ keep in mind a transfer can occurs after listing creation)
  token: Token! # listing_assetContract-listing_tokenId
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  quantity: BigInt! # uint256
  currency: Bytes! # address
  reservePricePerToken: BigInt! # uint256
  buyoutPricePerToken: BigInt! # uint256
  tokenType: TokenType! # from listing_tokenType uint8
  transferType: TransferType! # from listing_transferType uint8
  rentalExpirationTimestamp: BigInt! # uint64
  status: Status!
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
  completedBid: MarketplaceBid
  bids: [MarketplaceBid!] @derivedFrom(field: "listing") # the most recent bid (from creationTimestamp) is the winning bid
  directBuys: [MarketplaceDirectBuy!] @derivedFrom(field: "listing") # with ERC721 one element max
}

type MarketplaceOffer @entity {
  id: String! # offerId
  origin: Bytes! # address DSponsorMarketplace contract address
  offeror: Bytes! # address
  token: Token! # offer_assetContract-offer_tokenId
  quantity: BigInt! # uint256
  currency: Bytes! # address
  totalPrice: BigInt! # uint256
  tokenType: TokenType! # uint8
  transferType: TransferType! # uint8
  expirationTimestamp: BigInt! # uint256
  rentalExpirationTimestamp: BigInt! # uint64
  status: Status! # uint8
  revenueTransaction: RevenueTransaction
  referralAdditionalInformation: String
  creationTimestamp: BigInt!
  lastUpdateTimestamp: BigInt!
  #
  # once accepted
  feeMethodology: FeeMethodology
  amountSentToProtocol: BigInt
  protocolRecipient: Bytes
  amountSentToSeller: BigInt
  sellerRecipient: Bytes
  amountSentToCreator: BigInt
  creatorRecipient: Bytes
}

type RevenueTransaction @entity {
  id: Bytes! # event.transaction.hash
  blockTimestamp: BigInt!
  protocolFees: [CallWithProtocolFee!] @derivedFrom(field: "revenueTransaction")
  marketplaceBids: [MarketplaceBid!] @derivedFrom(field: "revenueTransaction")
  marketplaceDirectBuys: [MarketplaceDirectBuy!]
    @derivedFrom(field: "revenueTransaction")
  marketplaceOffers: [MarketplaceOffer!]
    @derivedFrom(field: "revenueTransaction")
  mints: [Mint!] @derivedFrom(field: "revenueTransaction")
}

type Token @entity {
  id: String! # nftContractAddress - tokenId
  nftContract: NftContract!
  tokenId: BigInt! # uint256
  # owner: Bytes! # address
  # lastTransferTimestamp: BigInt! # uint256
  setInAllowList: Boolean
  mint: Mint
  owner: Bytes # address
  user: UpdateUser
  prices: [TokenPrice!] @derivedFrom(field: "token")
  currentProposals: [CurrentProposal!] @derivedFrom(field: "token")
  allProposals: [AdProposal!] @derivedFrom(field: "token")
  marketplaceListings: [MarketplaceListing!] @derivedFrom(field: "token")
  marketplaceOffers: [MarketplaceOffer!] @derivedFrom(field: "token")
  transfers: [Transfer!] @derivedFrom(field: "token")
}

type TokenPrice @entity {
  id: String! # nftContractAddress-currencyAddress-all|tokenId
  currency: Bytes! # address
  amount: BigInt! # uint256
  enabled: Boolean! # bool
  token: Token!
}

#####################
## Metadata
#####################

type AdOfferMetadata @entity {
  id: ID!
  content: String
  creator_name: String
  creator_description: String
  creator_image: String
  creator_categories: [String!]
  offer_name: String
  offer_description: String
  offer_image: String
  offer_terms: String
  offer_categories: [String!]
  offer_visibility_interfaces: [String!]
  offer_visibility_targets: [String!]
  offer_validFrom: BigInt # unix timestamp
  offer_validTo: BigInt # unix timestamp
  offer_token_metadataContent: String
  offers: [AdOffer!] @derivedFrom(field: "metadata")
}

type NftContractMetadata @entity {
  id: ID!
  content: String
  name: String
  description: String
  image: String
  external_link: String
  external_url: String
  collaborators: [Bytes!]
  contracts: [NftContract!] @derivedFrom(field: "metadata")
}

"""
type _Schema_
  @fulltext(
    name: "offerSearch"
    language: simple
    algorithm: proximityRank
    include: [
      { entity: "AdOffer", fields: [{ name: "name" }] }
      {
        entity: "AdOfferMetadata"
        fields: [
          { name: "name" }
          { name: "content" }
          { name: "creator_name" }
          { name: "creator_description" }
          { name: "creator_categories" }
          { name: "offer_name" }
          { name: "offer_description" }
          { name: "offer_categories" }
          { name: "offer_visibility_interfaces" }
          { name: "offer_visibility_targets" }
          { name: "offer_metadataContent" }
        ]
      }
      {
        entity: "NftContractMetadata"
        fields: [{ name: "name" }, { name: "content" }, { name: "description" }]
      }
    ]
  )
"""
type ################################
## Common: ProtocoFee + Ownable
#################################

CallWithProtocolFee @entity(immutable: true) {
  id: Bytes!
  target: Bytes! # address
  currency: Bytes! # address
  fee: BigInt! # uint256
  enabler: Bytes! # address
  spender: Bytes! # address
  referralAdditionalInformation: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  revenueTransaction: RevenueTransaction
  referralAddresses: [Bytes!]! # address[]
  referralUnitShare: Int
  referralNb: Int
  epochCurrencyRevenue: EpochCurrencyRevenue!
}

type FeeUpdate @entity(immutable: true) {
  id: Bytes!
  feeRecipient: Bytes! # address
  feeBps: BigInt! # uint96
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  contractAddress: Bytes! # address
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

#####################
## DSponsorAdmin
#####################

type UpdateAdProposal @entity(immutable: true) {
  id: Bytes!
  offerId: BigInt! # uint256
  tokenId: BigInt! # uint256
  proposalId: BigInt! # uint256
  adParameter: String! # string
  data: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateAdValidation @entity(immutable: true) {
  id: Bytes!
  offerId: BigInt! # uint256
  tokenId: BigInt! # uint256
  proposalId: BigInt! # uint256
  adParameter: String! # string
  validated: Boolean! # bool
  reason: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateOffer @entity(immutable: true) {
  id: Bytes!
  offerId: BigInt! # uint256
  disable: Boolean! # bool
  name: String! # string
  offerMetadata: String! # string
  nftContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateOfferAdParameter @entity(immutable: true) {
  id: Bytes!
  offerId: BigInt! # uint256
  adParameter: String! # string
  enable: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateOfferAdmin @entity(immutable: true) {
  id: Bytes!
  offerId: BigInt! # uint256
  admin: Bytes! # address
  enable: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateOfferValidator @entity(immutable: true) {
  id: Bytes!
  offerId: BigInt! # uint256
  validator: Bytes! # address
  enable: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

#####################
## DSponsorNFT
#####################

"""
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
"""
type ContractURIUpdated @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

"""
type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
"""
type Mint @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!
  token: Token!

  tokenId: BigInt! # uint256
  from: Bytes! # address
  to: Bytes! # address
  currency: Bytes! # address
  amount: BigInt! # uint256
  tokenData: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  revenueTransaction: RevenueTransaction
  feeMethodology: FeeMethodology
  amountSentToProtocol: BigInt
  protocolRecipient: Bytes
  totalPaid: BigInt
  #
}

type RoyaltiesSet @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!

  receiver: Bytes! # address
  bps: BigInt! # uint96
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

type TokensAllowlist @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!

  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensAllowlistUpdated @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!
  token: Token!

  tokenId: BigInt! # uint256
  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!
  token: Token!

  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateDefaultMintPrice @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!

  currency: Bytes! # address
  enabled: Boolean! # bool
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateMintPrice @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!

  tokenId: BigInt! # uint256
  currency: Bytes! # address
  enabled: Boolean! # bool
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateUser @entity(immutable: true) {
  id: Bytes!

  nftContract: NftContract!

  tokenId: BigInt! # uint256
  user: Bytes! # address
  expires: BigInt! # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
}

#####################
## DSponsorMarketplace
#####################

type AcceptedOffer @entity(immutable: true) {
  id: Bytes!
  offeror: Bytes! # address
  offerId: BigInt! # uint256
  assetContract: Bytes! # address
  tokenId: BigInt! # uint256
  seller: Bytes! # address
  quantityBought: BigInt! # uint256
  totalPricePaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionClosed @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  closer: Bytes! # address
  cancelled: Boolean! # bool
  auctionCreator: Bytes! # address
  winningBidder: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CancelledOffer @entity(immutable: true) {
  id: Bytes!
  offeror: Bytes! # address
  offerId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ListingAdded @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  assetContract: Bytes! # address
  lister: Bytes! # address
  listing_listingId: BigInt! # uint256
  listing_tokenOwner: Bytes! # address
  listing_assetContract: Bytes! # address
  listing_tokenId: BigInt! # uint256
  listing_startTime: BigInt! # uint256
  listing_endTime: BigInt! # uint256
  listing_quantity: BigInt! # uint256
  listing_currency: Bytes! # address
  listing_reservePricePerToken: BigInt! # uint256
  listing_buyoutPricePerToken: BigInt! # uint256
  listing_tokenType: Int! # uint8
  listing_transferType: Int! # uint8
  listing_rentalExpirationTimestamp: BigInt! # uint64
  listing_listingType: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ListingRemoved @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  listingCreator: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ListingUpdated @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  listingCreator: Bytes! # address
  quantityToList: BigInt! # uint256
  reservePricePerToken: BigInt! # uint256
  buyoutPricePerToken: BigInt! # uint256
  currencyToAccept: Bytes! # address
  startTime: BigInt! # uint256
  secondsUntilEndTime: BigInt! # uint256
  rentalExpirationTimestamp: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewBid @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  quantityWanted: BigInt! # uint256
  newBidder: Bytes! # address
  newPricePerToken: BigInt! # uint256
  previousBidder: Bytes! # address
  refundBonus: BigInt! # uint256
  currency: Bytes! # address
  newEndTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewOffer @entity(immutable: true) {
  id: Bytes!
  offeror: Bytes! # address
  offerId: BigInt! # uint256
  assetContract: Bytes! # address
  offer_offerId: BigInt! # uint256
  offer_tokenId: BigInt! # uint256
  offer_quantity: BigInt! # uint256
  offer_totalPrice: BigInt! # uint256
  offer_expirationTimestamp: BigInt! # uint256
  offer_offeror: Bytes! # address
  offer_assetContract: Bytes! # address
  offer_currency: Bytes! # address
  offer_tokenType: Int! # uint8
  offer_transferType: Int! # uint8
  offer_rentalExpirationTimestamp: BigInt! # uint64
  offer_status: Int! # uint8
  offer_referralAdditionalInformation: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewSale @entity(immutable: true) {
  id: Bytes!
  listingId: BigInt! # uint256
  assetContract: Bytes! # address
  lister: Bytes! # address
  buyer: Bytes! # address
  quantityBought: BigInt! # uint256
  totalPricePaid: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
